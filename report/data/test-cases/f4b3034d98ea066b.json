{"uid":"f4b3034d98ea066b","name":"test_01","fullName":"tests.G3.tjxg3_agit.TJXG3Agit#test_01","historyId":"f26221d393fcfe4ba894b02d2f9e7484","time":{"start":1752828167095,"stop":1752828175103,"duration":8008},"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <tjxg3_agit.TJXG3Agit object at 0x7f8828630fa0>\n\n    @pytest.mark.asyncio\n    @pytest.mark.run(order=1)\n    @allure.title('test_01')\n    async def test_01(self):\n        await set_agit_sp(10)\n        await set_agit_sp_source('Fixed')\n        await asyncio.sleep(2)\n        pv1 = await get_agit_pv()\n        if pv1 > 0:\n            await set_agit_sp_source('Disable')\n            await asyncio.sleep(2)\n            pv2 = await get_agit_pv()\n            if math.fabs(pv2) > 1e-10:\n                allure.attach(body=f'curr pv is {pv2}, expect is zero', name='Error', attachment_type=allure.attachment_type.TEXT)\n                assert False\n        else:\n            allure.attach(body=f'curr pv is {pv1}, expect is greater than zero', name='Error', attachment_type=allure.attachment_type.TEXT)\n>           assert False\nE           assert False\n\ntests/G3/tjxg3_agit.py:38: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop","time":{"start":1752828167092,"stop":1752828167093,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop_policy","time":{"start":1752828167092,"stop":1752828167092,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <tjxg3_agit.TJXG3Agit object at 0x7f8828630fa0>\n\n    @pytest.mark.asyncio\n    @pytest.mark.run(order=1)\n    @allure.title('test_01')\n    async def test_01(self):\n        await set_agit_sp(10)\n        await set_agit_sp_source('Fixed')\n        await asyncio.sleep(2)\n        pv1 = await get_agit_pv()\n        if pv1 > 0:\n            await set_agit_sp_source('Disable')\n            await asyncio.sleep(2)\n            pv2 = await get_agit_pv()\n            if math.fabs(pv2) > 1e-10:\n                allure.attach(body=f'curr pv is {pv2}, expect is zero', name='Error', attachment_type=allure.attachment_type.TEXT)\n                assert False\n        else:\n            allure.attach(body=f'curr pv is {pv1}, expect is greater than zero', name='Error', attachment_type=allure.attachment_type.TEXT)\n>           assert False\nE           assert False\n\ntests/G3/tjxg3_agit.py:38: AssertionError","steps":[],"attachments":[{"uid":"30d06aa3df3b6331","name":"Error","source":"30d06aa3df3b6331.txt","type":"text/plain","size":43}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"event_loop::3","time":{"start":1752828175162,"stop":1752828175163,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_close_event_loop","time":{"start":1752828175163,"stop":1752828175163,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_restore_policy","time":{"start":1752828175163,"stop":1752828175163,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_provide_clean_event_loop","time":{"start":1752828175163,"stop":1752828175163,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Agit"},{"name":"tag","value":"asyncio"},{"name":"tag","value":"Agit"},{"name":"parentSuite","value":"tests.G3"},{"name":"suite","value":"tjxg3_agit"},{"name":"subSuite","value":"TJXG3Agit"},{"name":"host","value":"ubuntu"},{"name":"thread","value":"152350-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.G3.tjxg3_agit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":["asyncio","Agit"]},"source":"f4b3034d98ea066b.json","parameterValues":[]}