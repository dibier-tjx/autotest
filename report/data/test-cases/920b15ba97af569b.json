{"uid":"920b15ba97af569b","name":"test_01","fullName":"tests.G3.tjxg3_mfc.TJXG3MFC#test_01","historyId":"b7b02e097f6da69fad93a31861b77a45","time":{"start":1752828167098,"stop":1752828175109,"duration":8011},"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <tjxg3_mfc.TJXG3MFC object at 0x7f6fac319bb0>\n\n    @pytest.mark.asyncio\n    @pytest.mark.run(order=1)\n    @allure.title('test_01')\n    async def test_01(self):\n        for i, mfc in enumerate(get_mfcs()):\n            await set_mfc_sp(i, 3)\n            await set_mfc_sp_source(i, 'Fixed')\n            await asyncio.sleep(2)\n            pv1 = await get_mfc_pv(i)\n            if pv1 > 0:\n                await set_mfc_sp_source(i, 'Disable')\n                await asyncio.sleep(2)\n                pv2 = await get_mfc_pv(i)\n                if math.fabs(pv2) > 1e-10:\n                    allure.attach(body=f'MFC{i+1}[{mfc}] curr pv is {pv2}, expect is zero', name='Error', attachment_type=allure.attachment_type.TEXT)\n                    assert False\n            else:\n                allure.attach(body=f'MFC{i+1}[{mfc}] curr pv is {pv1}, expect is greater than zero', name='Error', attachment_type=allure.attachment_type.TEXT)\n>               assert False\nE               assert False\n\ntests/G3/tjxg3_mfc.py:39: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1752828167096,"stop":1752828167096,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop","time":{"start":1752828167096,"stop":1752828167097,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <tjxg3_mfc.TJXG3MFC object at 0x7f6fac319bb0>\n\n    @pytest.mark.asyncio\n    @pytest.mark.run(order=1)\n    @allure.title('test_01')\n    async def test_01(self):\n        for i, mfc in enumerate(get_mfcs()):\n            await set_mfc_sp(i, 3)\n            await set_mfc_sp_source(i, 'Fixed')\n            await asyncio.sleep(2)\n            pv1 = await get_mfc_pv(i)\n            if pv1 > 0:\n                await set_mfc_sp_source(i, 'Disable')\n                await asyncio.sleep(2)\n                pv2 = await get_mfc_pv(i)\n                if math.fabs(pv2) > 1e-10:\n                    allure.attach(body=f'MFC{i+1}[{mfc}] curr pv is {pv2}, expect is zero', name='Error', attachment_type=allure.attachment_type.TEXT)\n                    assert False\n            else:\n                allure.attach(body=f'MFC{i+1}[{mfc}] curr pv is {pv1}, expect is greater than zero', name='Error', attachment_type=allure.attachment_type.TEXT)\n>               assert False\nE               assert False\n\ntests/G3/tjxg3_mfc.py:39: AssertionError","steps":[],"attachments":[{"uid":"de92fbed313bd66b","name":"Error","source":"de92fbed313bd66b.txt","type":"text/plain","size":53}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"event_loop::3","time":{"start":1752828175159,"stop":1752828175159,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_close_event_loop","time":{"start":1752828175159,"stop":1752828175159,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_restore_policy","time":{"start":1752828175159,"stop":1752828175159,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_provide_clean_event_loop","time":{"start":1752828175159,"stop":1752828175160,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"MFC"},{"name":"tag","value":"asyncio"},{"name":"tag","value":"MFC"},{"name":"parentSuite","value":"tests.G3"},{"name":"suite","value":"tjxg3_mfc"},{"name":"subSuite","value":"TJXG3MFC"},{"name":"host","value":"ubuntu"},{"name":"thread","value":"152347-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.G3.tjxg3_mfc"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":["asyncio","MFC"]},"source":"920b15ba97af569b.json","parameterValues":[]}