{"uid":"a327e482ff73e3b6","name":"test_02","fullName":"tests.G3.tjxg3_temp.TJXG3Temp#test_02","historyId":"c94e4257944b85fe7b7d5f8305ef058a","time":{"start":1752828222322,"stop":1752828237337,"duration":15015},"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <tjxg3_temp.TJXG3Temp object at 0x7f8828655cd0>\n\n    @pytest.mark.asyncio\n    @pytest.mark.run(order=2)\n    @allure.title('test_02')\n    async def test_02(self):\n        await start_agit_to_temp()\n        await set_temp_sp_source('Fixed')\n        for it in get_temp_sps():\n            pv1 = await get_temp_pv()\n            await set_temp_sp(it)\n            elapsed_time, timeout = await self.pv_close_to_sp(it)\n            pv2 = await get_temp_pv()\n            if elapsed_time is not None:\n                allure.attach(body=f'{pv1}->{it} speed {elapsed_time} s, curr pv is {pv2}', name='Comment', attachment_type=allure.attachment_type.TEXT)\n            else:\n                allure.attach(body=f'{pv1}->{it} speed {timeout} s, curr pv is {pv2}', name='Error', attachment_type=allure.attachment_type.TEXT)\n                await set_temp_sp_source('Disable')\n>               assert False\nE               assert False\n\ntests/G3/tjxg3_temp.py:56: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1752828167092,"stop":1752828167092,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop","time":{"start":1752828222321,"stop":1752828222321,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <tjxg3_temp.TJXG3Temp object at 0x7f8828655cd0>\n\n    @pytest.mark.asyncio\n    @pytest.mark.run(order=2)\n    @allure.title('test_02')\n    async def test_02(self):\n        await start_agit_to_temp()\n        await set_temp_sp_source('Fixed')\n        for it in get_temp_sps():\n            pv1 = await get_temp_pv()\n            await set_temp_sp(it)\n            elapsed_time, timeout = await self.pv_close_to_sp(it)\n            pv2 = await get_temp_pv()\n            if elapsed_time is not None:\n                allure.attach(body=f'{pv1}->{it} speed {elapsed_time} s, curr pv is {pv2}', name='Comment', attachment_type=allure.attachment_type.TEXT)\n            else:\n                allure.attach(body=f'{pv1}->{it} speed {timeout} s, curr pv is {pv2}', name='Error', attachment_type=allure.attachment_type.TEXT)\n                await set_temp_sp_source('Disable')\n>               assert False\nE               assert False\n\ntests/G3/tjxg3_temp.py:56: AssertionError","steps":[],"attachments":[{"uid":"abe50e35399a358b","name":"Error","source":"abe50e35399a358b.txt","type":"text/plain","size":35}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"event_loop::3","time":{"start":1752828237343,"stop":1752828237343,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_close_event_loop","time":{"start":1752828237343,"stop":1752828237343,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_restore_policy","time":{"start":1752828237344,"stop":1752828237344,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_provide_clean_event_loop","time":{"start":1752828237344,"stop":1752828237344,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Temp"},{"name":"tag","value":"asyncio"},{"name":"tag","value":"Temp"},{"name":"parentSuite","value":"tests.G3"},{"name":"suite","value":"tjxg3_temp"},{"name":"subSuite","value":"TJXG3Temp"},{"name":"host","value":"ubuntu"},{"name":"thread","value":"152350-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.G3.tjxg3_temp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":["Temp","asyncio"]},"source":"a327e482ff73e3b6.json","parameterValues":[]}