{"uid":"79c3b7505bd5af27","name":"test_02","fullName":"tests.G3.tjxg3_mfc.TJXG3MFC#test_02","historyId":"1c843a2098c8e7c4f7159f893b446992","time":{"start":1752828199236,"stop":1752828212257,"duration":13021},"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <tjxg3_mfc.TJXG3MFC object at 0x7f6fac319e50>\n\n    @pytest.mark.asyncio\n    @pytest.mark.run(order=2)\n    @allure.title('test_02')\n    async def test_02(self):\n        for i, mfc in enumerate(get_mfcs()):\n            await set_mfc_sp_source(i, 'Fixed')\n            for it in get_mfc_sps(i):\n                pv1 = await get_mfc_pv(i)\n                await set_mfc_sp(i, it)\n                elapsed_time, timeout = await self.pv_close_to_sp(i, it)\n                pv2 = await get_mfc_pv(i)\n                if elapsed_time is not None:\n                    allure.attach(body=f'MFC{i+1}[{mfc}] {pv1}->{it} speed {elapsed_time} s, curr pv is {pv2}', name='Comment', attachment_type=allure.attachment_type.TEXT)\n                else:\n                    allure.attach(body=f'MFC{i+1}[{mfc}] {pv1}->{it} speed {timeout} s, curr pv is {pv2}', name='Error', attachment_type=allure.attachment_type.TEXT)\n                    await set_mfc_sp_source(i, 'Disable')\n>                   assert False\nE                   assert False\n\ntests/G3/tjxg3_mfc.py:57: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1752828167096,"stop":1752828167096,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop","time":{"start":1752828199235,"stop":1752828199235,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <tjxg3_mfc.TJXG3MFC object at 0x7f6fac319e50>\n\n    @pytest.mark.asyncio\n    @pytest.mark.run(order=2)\n    @allure.title('test_02')\n    async def test_02(self):\n        for i, mfc in enumerate(get_mfcs()):\n            await set_mfc_sp_source(i, 'Fixed')\n            for it in get_mfc_sps(i):\n                pv1 = await get_mfc_pv(i)\n                await set_mfc_sp(i, it)\n                elapsed_time, timeout = await self.pv_close_to_sp(i, it)\n                pv2 = await get_mfc_pv(i)\n                if elapsed_time is not None:\n                    allure.attach(body=f'MFC{i+1}[{mfc}] {pv1}->{it} speed {elapsed_time} s, curr pv is {pv2}', name='Comment', attachment_type=allure.attachment_type.TEXT)\n                else:\n                    allure.attach(body=f'MFC{i+1}[{mfc}] {pv1}->{it} speed {timeout} s, curr pv is {pv2}', name='Error', attachment_type=allure.attachment_type.TEXT)\n                    await set_mfc_sp_source(i, 'Disable')\n>                   assert False\nE                   assert False\n\ntests/G3/tjxg3_mfc.py:57: AssertionError","steps":[],"attachments":[{"uid":"e9779562a766928b","name":"Error","source":"e9779562a766928b.txt","type":"text/plain","size":45}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"event_loop::3","time":{"start":1752828212282,"stop":1752828212283,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_close_event_loop","time":{"start":1752828212283,"stop":1752828212283,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_restore_policy","time":{"start":1752828212283,"stop":1752828212283,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_provide_clean_event_loop","time":{"start":1752828212283,"stop":1752828212283,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"MFC"},{"name":"tag","value":"asyncio"},{"name":"tag","value":"MFC"},{"name":"parentSuite","value":"tests.G3"},{"name":"suite","value":"tjxg3_mfc"},{"name":"subSuite","value":"TJXG3MFC"},{"name":"host","value":"ubuntu"},{"name":"thread","value":"152347-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.G3.tjxg3_mfc"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":["asyncio","MFC"]},"source":"79c3b7505bd5af27.json","parameterValues":[]}