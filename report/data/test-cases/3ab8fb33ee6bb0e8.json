{"uid":"3ab8fb33ee6bb0e8","name":"test_01","fullName":"tests.G3.tjxg3_pump.TJXG3Pump#test_01","historyId":"bd1cfbc0d8d3a19e36526108a95a426f","time":{"start":1752828183189,"stop":1752828191203,"duration":8014},"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <tjxg3_pump.TJXG3Pump object at 0x7f6fac326910>\n\n    @pytest.mark.asyncio\n    @pytest.mark.run(order=1)\n    @allure.title('test_01')\n    async def test_01(self):\n        for i, pump in enumerate(get_pumps()):\n            await set_pump_sp(i, 3)\n            await set_pump_sp_source(i, 'Fixed')\n            await asyncio.sleep(2)\n            pv1 = await get_pump_pv(i)\n            if pv1 > 0:\n                await set_pump_sp_source(i, 'Disable')\n                await asyncio.sleep(2)\n                pv2 = await get_pump_pv(i)\n                if math.fabs(pv2) > 1e-10:\n                    allure.attach(body=f'Pump{i+1}[{pump}] curr pv is {pv2}, expect is zero', name='Error', attachment_type=allure.attachment_type.TEXT)\n                    assert False\n            else:\n                allure.attach(body=f'Pump{i+1}[{pump}] curr pv is {pv1}, expect is greater than zero', name='Error', attachment_type=allure.attachment_type.TEXT)\n>               assert False\nE               assert False\n\ntests/G3/tjxg3_pump.py:39: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1752828167096,"stop":1752828167096,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop","time":{"start":1752828183188,"stop":1752828183188,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <tjxg3_pump.TJXG3Pump object at 0x7f6fac326910>\n\n    @pytest.mark.asyncio\n    @pytest.mark.run(order=1)\n    @allure.title('test_01')\n    async def test_01(self):\n        for i, pump in enumerate(get_pumps()):\n            await set_pump_sp(i, 3)\n            await set_pump_sp_source(i, 'Fixed')\n            await asyncio.sleep(2)\n            pv1 = await get_pump_pv(i)\n            if pv1 > 0:\n                await set_pump_sp_source(i, 'Disable')\n                await asyncio.sleep(2)\n                pv2 = await get_pump_pv(i)\n                if math.fabs(pv2) > 1e-10:\n                    allure.attach(body=f'Pump{i+1}[{pump}] curr pv is {pv2}, expect is zero', name='Error', attachment_type=allure.attachment_type.TEXT)\n                    assert False\n            else:\n                allure.attach(body=f'Pump{i+1}[{pump}] curr pv is {pv1}, expect is greater than zero', name='Error', attachment_type=allure.attachment_type.TEXT)\n>               assert False\nE               assert False\n\ntests/G3/tjxg3_pump.py:39: AssertionError","steps":[],"attachments":[{"uid":"2f3a6b4a0b08e584","name":"Error","source":"2f3a6b4a0b08e584.txt","type":"text/plain","size":55}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"event_loop::3","time":{"start":1752828191208,"stop":1752828191208,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_close_event_loop","time":{"start":1752828191208,"stop":1752828191208,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_restore_policy","time":{"start":1752828191208,"stop":1752828191208,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_provide_clean_event_loop","time":{"start":1752828191208,"stop":1752828191209,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Pump"},{"name":"tag","value":"asyncio"},{"name":"tag","value":"Pump"},{"name":"parentSuite","value":"tests.G3"},{"name":"suite","value":"tjxg3_pump"},{"name":"subSuite","value":"TJXG3Pump"},{"name":"host","value":"ubuntu"},{"name":"thread","value":"152347-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.G3.tjxg3_pump"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":["asyncio","Pump"]},"source":"3ab8fb33ee6bb0e8.json","parameterValues":[]}